# Script to install Debian Buster on Hisense C11 chromebook
# All rights reserved by the author
# https://github.com/com-py/Hibuntu
# Credit: based on ChrUnbutu and Arch Linux ARM
# This software is free. Use at your own risk. No warranty of any kind is implied.
#
# If you are seeing this in your web browser, save it as "hibuntu" to the "Downloads" folder.
#             Usage: sudo bash ~/Downloads/hibuntu /dev/mmcblk1   [or /dev/sda for USB]
#debootstrapping scripts are copied from https://wiki.debian.org/InstallingDebianOn/Asus/C201

#first stage debootstrap expected.
script=hibuntu
hostname=hibuntu
set -x

if [ "$2" != "" ]; then
	username=$2
else
	username=me
fi

hwid="`crossystem hwid`"
chromebook_arch="`uname -mi`"
ubuntu_arch="armhf"
  
echo -e "
            ****** This software is free. Use at your own risk. No warranty of any kind is implied. ******

Chromebook/Hisense device model is: $hwid; Machine Arch is: $chromebook_arch

Installing Ubuntu (something) LTS (trusty, port $ubuntu_arch, aka $hostname) minimal with network manager
Usage for microSD: sudo $script /dev/mmcblk1 (or /dev/mmcblk0 if and _only if_ you are using the last Chrome OS firmware); for USB: sudo $script /dev/sda

                                    ****** Preparation Warning ****** 
It is assumed that you have prepared the target disk (/dev/mmcblk1=microSD, /dev/sda=USB) by following exactly steps 1--8 from
https://archlinuxarm.org/platforms/armv7/rockchip/hisense-chromebook-c11
If not, abort immediately, prepared the disk, and restart the process.
This installation starts from step 9 for installing Ubuntu instead of Arch Linux."

# check target disk
if [ "$1" != "" ]; then
	target_disk=$1
	if test $target_disk = "/dev/mmcblk0"; then
	
		chk="`cgpt show -i 10 $target_disk | grep Unused`"
		if [ "$chk" = "" ]; then
			echo -e "\nPartition table does not look correct - is this the internal eMMC? \n\a\a"
			exit
		else
			device="microSD card (for Chromebook firmware)"
			kernp="${target_disk}p1"
			rootp="${target_disk}p2"
		fi		
	elif test $target_disk = "/dev/mmcblk1"; then
		device="microSD card"
		kernp="${target_disk}p1"
		rootp="${target_disk}p2"
	elif test $target_disk = "/dev/sda"; then
		device="USB stick"
		kernp="${target_disk}1"
		rootp="${target_disk}2"
	else
		echo -e "\nUnknown target disk $target_disk\n\a\a"
		exit
	fi
	
	kstr="`cgpt show -i 1 $target_disk | grep kernel`"
	dstr="`cgpt show -i 2 $target_disk | grep data`"
	if [ "$kstr" = "" ] || [ "$dstr" = "" ]; then
		echo -e "\nTarget disk $target_disk not prepared correctly; exiting\n\a\a"
		exit
	fi
	
	dsiz="`cgpt show -i 2 $target_disk | grep Label | awk '{print $2}'`"
	size="`expr $dsiz \* 512 / 1000 / 1000 / 1000`"
else
	echo -e "\nNo target disk given; usage: sudo $script /dev/mmcblk1 [or /dev/sda]\n\a\a"
	exit
fi

DEV=$target_disk

# check ok, ready to install

echo -e "
                  Your disk checks out OK --- $device $target_disk, usable size ~ $size GB.

Kernel will be installed to $kernp, and OS files to $rootp
All existing data on target disk --- $device $target_disk --- will be erased!\n"

read -p "Ready to Rock... Press [Enter] to continue, Ctrl-C to abort ..."

echo -e "\nStopping powerd to keep display from timing out..."
initctl stop powerd

umount $target_disk*
cd /tmp
mkdir kern
mkdir kern/boot
mkdir rootfs
mount  $rootp rootfs
echo -e "mount  $rootp rootfs"

# install debian by chroot
mount -o bind /proc    rootfs/proc
mount -o bind /dev     rootfs/dev
mount -o bind /dev/pts rootfs/dev/pts
mount -o bind /sys     rootfs/sys

MNT=/tmp/rootfs
chroot rootfs /debootstrap/debootstrap --second-stage

cat > ${MNT}/etc/apt/sources.list <<EOF
deb http://http.debian.net/debian buster main non-free contrib
deb-src http://http.debian.net/debian buster main non-free contrib
EOF

cat > ${MNT}/etc/fstab <<EOF
${DEV}p2 / ext4 errors=remount-ro 0 1
EOF

cp /etc/resolv.conf rootfs/etc/

# Update the package list:
chroot ${MNT} apt-get update
# Install useful packages:
chroot ${MNT} apt-get install -y cgpt vboot-utils \
        vboot-kernel-utils
#chroot ${MNT} apt-get install -y fbterm
chroot ${MNT} apt-get install -y network-manager

chroot ${MNT} passwd -d root

echo -e "$hostname" > rootfs/etc/hostname

# copy modules and firmwares from arch img
mkdir -p rootfs/lib/modules
mkdir -p rootfs/lib/firmware
mkdir -p rootfs/arch_rootfs

# download, extract kernel
src=http://tardis.tiny-vps.com/aarm/packages/l/linux-armv7/linux-armv7-5.10.13-1-armv7h.pkg.tar.xz
tgt=rootfs/kernel.tar.gz
curl -L $src -o ${tgt}
tar -xf ${tgt} -C rootfs/arch_rootfs
rm ${tgt}

echo -e "\nDownloading the kernel and firmwares......"
src=http://tardis.tiny-vps.com/aarm/packages/l/linux-armv7-chromebook/linux-armv7-chromebook-5.10.13-1-armv7h.pkg.tar.xz
tgt=rootfs/kernel_kpart.tar.gz
curl -L $src -o ${tgt}
tar -xf ${tgt} -C rootfs/arch_rootfs
rm ${tgt}

src=http://tardis.tiny-vps.com/aarm/packages/l/linux-firmware/linux-firmware-20210208.b79d239-1-any.pkg.tar.xz
tgt=rootfs/firmware.tar.gz
curl -L $src -o ${tgt}
tar -xf ${tgt} -C rootfs/arch_rootfs
rm ${tgt}

# flash kernel
echo -e "Flashing kernel to $kernp..."
kernname=vmlinux.kpart
dd if=rootfs/arch_rootfs/boot/$kernname  of=$kernp
echo -e "
...kernel flashed successfully."

echo -e "\n copying modules"
cp -ar rootfs/arch_rootfs/boot/* rootfs/boot/
cp -ar rootfs/arch_rootfs/usr/lib/* rootfs/lib/
cp -ar rootfs/arch_rootfs/usr/share/* rootfs/usr/share/
rm -rf rootfs/arch_rootfs
gunzip -r rootfs/lib/modules/5.10.13-1-ARCH/kernel/
chroot rootfs /bin/bash -c "depmod 5.10.13-1-ARCH"

# change default brightness, insert before last line
# TODO: fix (sysvinit -> systemd)
#sed -i '$i echo 50 > /sys/devices/backlight.20/backlight/backlight.20/brightness' rootfs/etc/rc.local

echo -e "

Congratulations! Installation successful 
After reboot, press Ctrl-U to boot from the $device. 
If it beeps, just power off and on again. Make sure your $device is the only one plugged in.

Username:  $username
Password:  root

To set up wireless after login, use these commands to scan, connect, and check connections: 
                             __________________________________
 ==========================  Please jot this down for reference  =========================
|    nmtui            
 =========================================================================================

Once you have a connection, you can add more stuff. 
For example, to add the xfce desktop and assorted programs including firefox, do:
sudo apt-get install openbox xubuntu-desktop

If booting from the $device fails (black screen), hold down the power button
for 10 seconds to power off, then turn it back on to login to Chrome OS.
Check for latest update at https://github.com/com-py/Hibuntu

Ready to start Hibuntu!
"

umount rootfs
sync

read -p "Press [Enter] to reboot; then wait for the $device to unmount..."

reboot

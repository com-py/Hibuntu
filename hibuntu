# Script to install Ubuntu trusty (14.04 LTS) on Hisense C11 chromebook
# All rights reserved by the author
# https://github.com/com-py/Hibuntu
# Credit: based on ChrUnbutu and Arch Linux ARM
# This software is free. Use at your own risk. No warranty of any kind is implied.
#
# If you are seeing this in your web browser, save it as "hibuntu" to the "Downloads" folder.
#             Usage: sudo bash ~/Downloads/hibuntu /dev/mmcblk1   [or /dev/sda for USB]
#debootstrapping scripts are copied from https://wiki.debian.org/InstallingDebianOn/Asus/C201

#first stage debootstrap expected.
script=hibuntu
hostname=hibuntu
set -x

if [ "$2" != "" ]; then
	username=$2
else
	username=me
fi

hwid="`crossystem hwid`"
chromebook_arch="`uname -mi`"
ubuntu_arch="armhf"
  
echo -e "
            ****** This software is free. Use at your own risk. No warranty of any kind is implied. ******

Chromebook/Hisense device model is: $hwid; Machine Arch is: $chromebook_arch

Installing Ubuntu (something) LTS (trusty, port $ubuntu_arch, aka $hostname) minimal with network manager
Usage for microSD: sudo $script /dev/mmcblk1 (or /dev/mmcblk0 if and _only if_ you are using the last Chrome OS firmware); for USB: sudo $script /dev/sda

                                    ****** Preparation Warning ****** 
It is assumed that you have prepared the target disk (/dev/mmcblk1=microSD, /dev/sda=USB) by following exactly steps 1--8 from
https://archlinuxarm.org/platforms/armv7/rockchip/hisense-chromebook-c11
If not, abort immediately, prepared the disk, and restart the process.
This installation starts from step 9 for installing Ubuntu instead of Arch Linux."

# check target disk
if [ "$1" != "" ]; then
	target_disk=$1
	if test $target_disk = "/dev/mmcblk0"; then
	
		chk="`cgpt show -i 10 $target_disk | grep Unused`"
		if [ "$chk" = "" ]; then
			echo -e "\nPartition table does not look correct - is this the internal eMMC? \n\a\a"
			exit
		else
			device="microSD card (for Chromebook firmware)"
			kernp="${target_disk}p1"
			rootp="${target_disk}p2"
		fi		
	elif test $target_disk = "/dev/mmcblk1"; then
		device="microSD card"
		kernp="${target_disk}p1"
		rootp="${target_disk}p2"
	elif test $target_disk = "/dev/sda"; then
		device="USB stick"
		kernp="${target_disk}1"
		rootp="${target_disk}2"
	else
		echo -e "\nUnknown target disk $target_disk\n\a\a"
		exit
	fi
	
	kstr="`cgpt show -i 1 $target_disk | grep kernel`"
	dstr="`cgpt show -i 2 $target_disk | grep data`"
	if [ "$kstr" = "" ] || [ "$dstr" = "" ]; then
		echo -e "\nTarget disk $target_disk not prepared correctly; exiting\n\a\a"
		exit
	fi
	
	dsiz="`cgpt show -i 2 $target_disk | grep Label | awk '{print $2}'`"
	size="`expr $dsiz \* 512 / 1000 / 1000 / 1000`"
else
	echo -e "\nNo target disk given; usage: sudo $script /dev/mmcblk1 [or /dev/sda]\n\a\a"
	exit
fi

DEV=$target_disk

# check ok, ready to install

echo -e "
                  Your disk checks out OK --- $device $target_disk, usable size ~ $size GB.

Kernel will be installed to $kernp, and OS files to $rootp
All existing data on target disk --- $device $target_disk --- will be erased!\n"

read -p "Ready to Rock... Press [Enter] to continue, Ctrl-C to abort ..."

echo -e "\nStopping powerd to keep display from timing out..."
initctl stop powerd

umount $target_disk*
#mkfs.ext4 -F $rootp
cd /tmp
mkdir kern
mkdir kern/boot
mkdir rootfs
mount  $rootp rootfs
echo -e "mount  $rootp rootfs"

echo -e "Downloading Ubuntu $ubuntu_arch port..."
#tar_file="http://cdimage.ubuntu.com/ubuntu-base/releases/18.04/release/ubuntu-base-18.04.5-base-armhf.tar.gz"
#tar_file="http://cdimage.ubuntu.com/ubuntu-base/releases/16.04/release/ubuntu-base-16.04.6-base-armhf.tar.gz"
#echo -e "Writing base OS files to $rootp (some MB)..."
#curl -L $tar_file | tar xzvp -C rootfs
#echo -e "...base OS files done...\n"

# install ubuntu-minimal by chroot

mount -o bind /proc    rootfs/proc
mount -o bind /dev     rootfs/dev
mount -o bind /dev/pts rootfs/dev/pts
mount -o bind /sys     rootfs/sys

MNT=/tmp/rootfs
chroot rootfs /debootstrap/debootstrap --second-stage

cat > ${MNT}/etc/apt/sources.list <<EOF
# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to
# newer versions of the distribution.
deb http://ports.ubuntu.com/ubuntu-ports/ focal main restricted
# deb-src http://ports.ubuntu.com/ubuntu-ports/ focal main restricted

## Major bug fix updates produced after the final release of the
## distribution.
deb http://ports.ubuntu.com/ubuntu-ports/ focal-updates main restricted
# deb-src http://ports.ubuntu.com/ubuntu-ports/ focal-updates main restricted

## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team. Also, please note that software in universe WILL NOT receive any
## review or updates from the Ubuntu security team.
deb http://ports.ubuntu.com/ubuntu-ports/ focal universe
# deb-src http://ports.ubuntu.com/ubuntu-ports/ focal universe
deb http://ports.ubuntu.com/ubuntu-ports/ focal-updates universe
# deb-src http://ports.ubuntu.com/ubuntu-ports/ focal-updates universe

## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team, and may not be under a free licence. Please satisfy yourself as to
## your rights to use the software. Also, please note that software in
## multiverse WILL NOT receive any review or updates from the Ubuntu
## security team.
deb http://ports.ubuntu.com/ubuntu-ports/ focal multiverse
# deb-src http://ports.ubuntu.com/ubuntu-ports/ focal multiverse
deb http://ports.ubuntu.com/ubuntu-ports/ focal-updates multiverse
# deb-src http://ports.ubuntu.com/ubuntu-ports/ focal-updates multiverse

## N.B. software from this repository may not have been tested as
## extensively as that contained in the main release, although it includes
## newer versions of some applications which may provide useful features.
## Also, please note that software in backports WILL NOT receive any review
## or updates from the Ubuntu security team.
deb http://ports.ubuntu.com/ubuntu-ports/ focal-backports main restricted universe multiverse
# deb-src http://ports.ubuntu.com/ubuntu-ports/ focal-backports main restricted universe multiverse

## Uncomment the following two lines to add software from Canonical's
## 'partner' repository.
## This software is not part of Ubuntu, but is offered by Canonical and the
## respective vendors as a service to Ubuntu users.
# deb http://archive.canonical.com/ubuntu focal partner
# deb-src http://archive.canonical.com/ubuntu focal partner

deb http://ports.ubuntu.com/ubuntu-ports/ focal-security main restricted
# deb-src http://ports.ubuntu.com/ubuntu-ports/ focal-security main restricted
deb http://ports.ubuntu.com/ubuntu-ports/ focal-security universe
# deb-src http://ports.ubuntu.com/ubuntu-ports/ focal-security universe
deb http://ports.ubuntu.com/ubuntu-ports/ focal-security multiverse
# deb-src http://ports.ubuntu.com/ubuntu-ports/ focal-security multiverse

EOF

cat > ${MNT}/etc/fstab <<EOF
${DEV}p2 / ext4 errors=remount-ro 0 1
EOF

cp /etc/resolv.conf rootfs/etc/

# Update the package list:
chroot ${MNT} apt-get update
# Install useful packages:
chroot ${MNT} apt-get install -y cgpt vboot-utils \
        vboot-kernel-utils
chroot ${MNT} apt-get install -y xubuntu-desktop 

chroot ${MNT} passwd -d root

echo -e "$hostname" > rootfs/etc/hostname


# copy modules and firmwares from arch img
mkdir -p rootfs/lib/modules
mkdir -p rootfs/lib/firmware
mkdir -p rootfs/arch_rootfs
src=http://mirror.nus.edu.sg/archlinux-arm/os/ArchLinuxARM-armv7-chromebook-latest.tar.gz
tgt=rootfs/arch_rootfs.tar.gz

echo -e "\nDownloading arch rootfs, be patient ......"
curl -L $src -o ${tgt}
echo -e "\nuntarring arch rootfs"
tar -xf ${tgt} -C rootfs/arch_rootfs/
rm  ${tgt}

# flash kernel
echo -e "Flashing kernel to $kernp..."
kernname=vmlinux.kpart
dd if=rootfs/arch_rootfs/boot/$kernname  of=$kernp
echo -e "
...kernel flashed successfully."

echo -e "\n copying modules"
cp -ar rootfs/arch_rootfs/lib/modules/* rootfs/lib/modules/
cp -ar rootfs/arch_rootfs/lib/firmware/* rootfs/lib/firmware/
rm -rf rootfs/arch_rootfs
gunzip -r rootfs/lib/modules/5.5.7-1-ARCH/kernel/
chroot rootfs /bin/bash -c "depmod 5.5.7-1-ARCH"

# change default brightness, insert before last line
# TODO: fix (sysvinit -> systemd)
#sed -i '$i echo 50 > /sys/devices/backlight.20/backlight/backlight.20/brightness' rootfs/etc/rc.local

echo -e "

Congratulations! Installation successful 
After reboot, press Ctrl-U to boot from the $device. 
If it beeps, just power off and on again. Make sure your $device is the only one plugged in.

Username:  $username
Password:  root

To set up wireless after login, use these commands to scan, connect, and check connections: 
                             __________________________________
 ==========================  Please jot this down for reference  =========================
|    nmcli dev wifi                                                                       |
|    sudo nmcli dev wifi con \"your_net ssid\" password \"your_net_password\"  name \"My wifi\" |
|    nmcli dev status                                                                     |
 =========================================================================================

Once you have a connection, you can add more stuff. 
For example, to add the xfce desktop and assorted programs including firefox, do:
sudo apt-get install openbox xubuntu-desktop

If booting from the $device fails (black screen), hold down the power button
for 10 seconds to power off, then turn it back on to login to Chrome OS.
Check for latest update at https://github.com/com-py/Hibuntu

Ready to start Hibuntu!
"

umount rootfs
sync

read -p "Press [Enter] to reboot; then wait for the $device to unmount..."

reboot
